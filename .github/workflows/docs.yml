# ArqCashflow Documentation Automation with Code-Driven Generation
# Based on: https://docusaurus.io/docs/deployment#deploying-to-github-pages
#
# Phase 4: Auto-generation Implementation
# - Triggers on code changes to automatically regenerate affected documentation
# - API changes â†’ regenerate API documentation from route analysis
# - Schema changes â†’ regenerate database documentation from Prisma schema
# - Service layer changes â†’ update API behavior documentation
# - Achieves 70% auto-generated documentation target from strategy

name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
    paths:
      # Documentation changes (existing)
      - 'docs/**'
      - '.github/workflows/docs.yml'
      # Code changes that affect documentation (Phase 4: Auto-generation)
      - 'app/api/**'              # API route changes â†’ regenerate API docs
      - 'prisma/schema.prisma'    # Database schema â†’ regenerate schema docs
      - 'lib/services/**'         # Service layer â†’ update API behavior docs
      - 'types/**'                # Type definitions â†’ component docs
      - 'lib/middleware/**'       # Middleware changes â†’ API behavior
      - 'package.json'            # Dependencies â†’ may affect build/docs
  pull_request:
    branches: [main]
    paths:
      # Same paths for PR validation
      - 'docs/**'
      - 'app/api/**'
      - 'prisma/schema.prisma'
      - 'lib/services/**'
      - 'types/**'
      - 'lib/middleware/**'
  workflow_dispatch: # Allow manual trigger
  schedule:
    # Run weekly validation on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build and Validate Documentation
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs/docs-site
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: './docs/docs-site/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Install root project dependencies (for code analysis)
        run: |
          cd ../..
          npm ci || echo "Root dependencies installation failed, continuing with docs-only generation"
        continue-on-error: true

      - name: Validate documentation
        run: |
          cd scripts
          node validate-docs.js || echo "Validation completed with warnings"
        continue-on-error: true

      - name: Validate code examples
        run: |
          cd scripts
          node validate-code-examples-fast.js || echo "Code validation completed with warnings"
        continue-on-error: true

      - name: Generate API documentation
        run: |
          cd scripts
          node generate-api-docs.js || echo "API docs generation skipped or failed"
        continue-on-error: true

      - name: Generate database schema documentation
        run: |
          cd scripts
          node generate-schema-docs.js || echo "Schema docs generation skipped or failed"
        continue-on-error: true

      - name: Generate changelog from commits
        run: |
          cd scripts
          node generate-changelog.js || echo "Changelog generation skipped or failed"
        continue-on-error: true

      - name: Build website
        run: npm run build
        env:
          # Tell Docusaurus to build for GitHub Pages
          NODE_ENV: production

      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-validation-reports
          path: |
            docs/docs-site/validation-report.md
            docs/docs-site/code-validation-report.md
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload build artifact for deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/docs-site/build'

  deploy:
    name: Deploy to GitHub Pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Weekly health check job - runs on schedule for automated monitoring
  validate:
    name: Weekly Documentation Health Check
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './docs/docs-site/package-lock.json'

      - name: Install dependencies
        run: |
          cd docs/docs-site
          npm ci

      - name: Run comprehensive validation
        run: |
          cd docs/docs-site/scripts
          node validate-docs.js
          node validate-code-examples-fast.js
        continue-on-error: true

      - name: Upload weekly reports
        uses: actions/upload-artifact@v4
        with:
          name: weekly-docs-health-reports
          path: |
            docs/docs-site/validation-report.md
            docs/docs-site/code-validation-report.md
          retention-days: 90
          if-no-files-found: ignore

      - name: Create issue for critical problems
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'docs/docs-site/validation-report.md';

            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              const healthMatch = report.match(/Overall Score.*?(\d+)%/);
              const score = healthMatch ? parseInt(healthMatch[1]) : 0;

              if (score < 80) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `ðŸ“š Documentation Health Alert (${score}%)`,
                  body: `## Weekly Documentation Health Check Failed\n\nThe automated documentation validation found critical issues that need attention.\n\n**Health Score**: ${score}% ðŸ”´\n\n### Action Required\n- Review the validation report in the artifacts\n- Fix broken links and missing metadata\n- Update stale content\n\n[View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
                  labels: ['documentation', 'maintenance', 'automated']
                });
              }
            }

  # PR Comment job - adds validation results to PRs
  comment-pr:
    name: Comment PR Results
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Download validation reports
        uses: actions/download-artifact@v4
        with:
          name: documentation-validation-reports
        continue-on-error: true

      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let commentBody = '## ðŸ“š Documentation Build Results\n\n';

            // Add documentation health report
            if (fs.existsSync('validation-report.md')) {
              const report = fs.readFileSync('validation-report.md', 'utf8');
              const lines = report.split('\n');
              const summary = lines.slice(0, 20).join('\n');
              commentBody += summary + '\n\n';
            }

            // Add code validation report
            if (fs.existsSync('code-validation-report.md')) {
              const codeReport = fs.readFileSync('code-validation-report.md', 'utf8');
              const codeLines = codeReport.split('\n');
              const codeSummary = codeLines.slice(0, 15).join('\n');
              commentBody += '---\n\n## ðŸ”§ Code Example Validation\n\n' + codeSummary + '\n\n';
            }

            commentBody += `[View full reports in workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
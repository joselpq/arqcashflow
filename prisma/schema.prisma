generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contract {
  id          String       @id @default(cuid())
  clientName  String
  projectName String
  description String?
  totalValue  Float
  signedDate  DateTime
  status      String       @default("active")
  category    String?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamId      String
  budgets     Budget[]
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  receivables Receivable[]

  @@index([teamId])
}

model Receivable {
  id             String    @id @default(cuid())
  contractId     String
  expectedDate   DateTime
  amount         Float
  status         String    @default("pending")
  receivedDate   DateTime?
  receivedAmount Float?
  invoiceNumber  String?
  category       String?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  contract       Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([expectedDate])
  @@index([status])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id            String    @id @default(cuid())
  contractId    String?
  description   String
  amount        Float
  dueDate       DateTime
  category      String
  status        String    @default("pending")
  paidDate      DateTime?
  paidAmount    Float?
  vendor        String?
  invoiceNumber String?
  type          String    @default("operational")
  isRecurring   Boolean   @default(false)
  notes         String?
  receiptUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  teamId        String?
  contract      Contract? @relation(fields: [contractId], references: [id])
  team          Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([contractId])
  @@index([dueDate])
  @@index([status])
  @@index([category])
}

model Budget {
  id           String    @id @default(cuid())
  contractId   String?
  name         String
  category     String
  budgetAmount Float
  period       String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean   @default(true)
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  teamId       String?
  contract     Contract? @relation(fields: [contractId], references: [id])
  team         Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([contractId])
  @@index([category])
  @@index([startDate, endDate])
}

model RecurringExpense {
  id            String    @id @default(cuid())
  description   String
  amount        Float
  category      String
  vendor        String?
  frequency     String
  interval      Int       @default(1)
  dayOfMonth    Int?
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  lastGenerated DateTime?
  nextDue       DateTime
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([nextDue])
  @@index([isActive])
}

model Team {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  budgets   Budget[]
  contracts Contract[]
  expenses  Expense[]
  users     User[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([teamId])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contract {
  id                String             @id @default(cuid())
  clientName        String
  projectName       String
  description       String?
  totalValue        Float
  signedDate        DateTime
  status            String             @default("active")
  category          String?
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  teamId            String
  team              Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  expenses          Expense[]
  receivables       Receivable[]
  recurringExpenses RecurringExpense[] // Recurring expenses for this project

  @@index([teamId])
}

model Receivable {
  id             String    @id @default(cuid())
  contractId     String?
  expectedDate   DateTime
  amount         Float
  status         String    @default("pending")
  receivedDate   DateTime?
  receivedAmount Float?
  invoiceNumber  String?
  category       String?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  clientName     String?
  description    String?
  teamId         String?
  contract       Contract? @relation(fields: [contractId], references: [id], onDelete: Cascade)
  team           Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([contractId])
  @@index([expectedDate])
  @@index([status])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id                 String             @id @default(cuid())
  contractId         String?
  description        String
  amount             Float
  dueDate            DateTime
  category           String
  status             String             @default("pending")
  paidDate           DateTime?
  paidAmount         Float?
  vendor             String?
  invoiceNumber      String?
  type               String?
  isRecurring        Boolean            @default(false)
  notes              String?
  receiptUrl         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  teamId             String?

  // Recurring expense relation
  recurringExpenseId String?
  generatedDate      DateTime?          // When this was auto-generated

  contract           Contract?          @relation(fields: [contractId], references: [id])
  team               Team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  recurringExpense   RecurringExpense?  @relation(fields: [recurringExpenseId], references: [id])

  @@index([teamId])
  @@index([contractId])
  @@index([dueDate])
  @@index([status])
  @@index([category])
  @@index([recurringExpenseId])
}

model RecurringExpense {
  id             String    @id @default(cuid())
  description    String
  amount         Float
  category       String
  vendor         String?
  frequency      String    // 'weekly', 'monthly', 'quarterly', 'annual'
  interval       Int       @default(1)
  dayOfMonth     Int?
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean   @default(true)
  lastGenerated  DateTime?
  nextDue        DateTime
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Multi-tenant support
  teamId         String
  createdBy      String

  // Enhanced features
  contractId     String?   // Optional link to project
  type           String?   // 'operational', 'project', 'administrative'
  maxOccurrences Int?      // Alternative to endDate
  generatedCount Int       @default(0)
  lastError      String?   // Track generation errors
  invoiceNumber  String?   // Template for invoice numbers

  // Relations
  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [createdBy], references: [id])
  contract       Contract? @relation(fields: [contractId], references: [id])
  expenses       Expense[] // Generated expenses from this recurring template

  @@index([teamId])
  @@index([nextDue])
  @@index([isActive])
  @@index([teamId, isActive, nextDue]) // Composite index for efficient queries
}

model AuditLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())

  // Who made the change
  userId      String
  userEmail   String   // Cached for resilience if user is deleted
  teamId      String

  // What entity was changed
  entityType  String   // "contract", "receivable", "expense"
  entityId    String   // The ID of the changed entity

  // What kind of change
  action      String   // "created", "updated", "deleted"

  // What changed (for updates)
  changes     Json     // { "status": { "from": "pending", "to": "received" } }

  // Complete state snapshot (optional, for critical changes)
  snapshot    Json?    // Full entity state after change

  // Context
  metadata    Json?    // { "api_endpoint": "/api/contracts", "ip": "...", "user_agent": "..." }

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])

  @@index([entityType, entityId]) // Query by entity
  @@index([userId])               // Query by user
  @@index([teamId])               // Query by team
  @@index([timestamp])            // Query by time
  @@index([action])               // Query by action type
}

model Team {
  id                String             @id @default(cuid())
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyActivity   String?
  companyName       String?
  employeeCount     String?
  profession        String?
  revenueTier       String?
  type              String             @default("individual")
  contracts         Contract[]
  expenses          Expense[]
  receivables       Receivable[]
  users             User[]
  auditLogs         AuditLog[]         // Audit logs for this team
  recurringExpenses RecurringExpense[] // Recurring expense templates
  events            Event[]            // Events for this team
}

model Event {
  id        String   @id @default(cuid())
  type      String   // Event type (e.g., 'contract.created', 'receivable.paid')
  timestamp DateTime @default(now())
  teamId    String
  userId    String?  // Optional - system events may not have a user
  source    String   // 'api', 'service', 'ui', 'ai', 'system'
  payload   Json     // Event-specific data
  metadata  Json?    // Additional context (IP, user agent, etc.)

  // Relations
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([type])
  @@index([timestamp])
  @@index([teamId, type]) // Composite index for team-scoped queries by type
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  name               String?
  password           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  teamId             String
  onboardingComplete Boolean            @default(false)
  team               Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  auditLogs          AuditLog[]         // Audit logs created by this user
  recurringExpenses  RecurringExpense[] // Recurring expenses created by this user

  @@index([email])
  @@index([teamId])
}

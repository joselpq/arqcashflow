import { NextRequest, NextResponse } from 'next/server'
import { ChatOpenAI } from '@langchain/openai'
import { prisma } from '@/lib/prisma'
import { findContractMatches } from '@/lib/fuzzyMatch'
import { supervisorValidateReceivable } from '@/lib/supervisor'
import { z } from 'zod'
import { requireAuth } from '@/lib/auth-utils'

// Helper function for date display to avoid timezone conversion
function formatDateForDisplay(date: string | Date): string {
  if (!date) return ''
  if (typeof date === 'string' && date.includes('T')) {
    // Extract date part from ISO string and format manually to avoid timezone conversion
    const datePart = date.split('T')[0]
    const [year, month, day] = datePart.split('-')
    return `${day}/${month}/${year}`
  }
  // For date strings like "YYYY-MM-DD", parse manually to avoid timezone issues
  if (typeof date === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(date)) {
    const [year, month, day] = date.split('-')
    return `${day}/${month}/${year}`
  }
  const d = new Date(date)
  return d.toLocaleDateString('pt-BR')
}

const AIReceivableSchema = z.object({
  message: z.string(),
  history: z.array(z.object({
    role: z.enum(['user', 'assistant']),
    content: z.string()
  })).optional(),
  pendingReceivable: z.any().optional(),
  isConfirming: z.boolean().optional()
})

// Helper function to detect affirmative responses in Portuguese
function isAffirmativeResponse(message: string): boolean {
  const affirmativeWords = [
    'sim', 'yes', 'ok', 'okay', 'confirmo', 'confirmar', 'correto', 'certo',
    'perfeito', 'exato', 'isso', 'concordo', 'aceito', 'pode', 'vai', 'vamos',
    'tudo certo', 'est√° certo', 'beleza', 'pode criar', 'criar', 'confirma'
  ]

  const normalized = message.toLowerCase().trim()
  return affirmativeWords.some(word => normalized.includes(word))
}

export async function POST(request: NextRequest) {
  try {
    const { user, teamId } = await requireAuth()
    console.log('üîç AI RECEIVABLE DEBUG:', {
      userId: user.id,
      userEmail: user.email,
      teamId,
      teamName: user.team?.name
    })

    const body = await request.json()
    const { message, history, pendingReceivable, isConfirming } = AIReceivableSchema.parse(body)

    // If user is confirming a pending receivable, check if it's an affirmative response
    if (isConfirming && pendingReceivable) {
      if (!isAffirmativeResponse(message)) {
        // User is not confirming, treat as cancellation or new request
        return NextResponse.json({
          success: true,
          action: 'clarify',
          question: 'üòÖ Entendi que voc√™ n√£o quer criar esse receb√≠vel. Em que posso ajudar agora?'
        })
      }

      // User confirmed, proceed with creation
      const alerts = await supervisorValidateReceivable(pendingReceivable, pendingReceivable.contractId, teamId)

      const receivable = await prisma.receivable.create({
        data: {
          ...pendingReceivable,
          expectedDate: new Date(pendingReceivable.expectedDate),
          status: 'pending'
        },
        include: {
          contract: true
        }
      })

      // Note: Alert storage is handled on the client side

      return NextResponse.json({
        success: true,
        action: 'created',
        receivable,
        message: 'Conta a receber criada com sucesso!',
        alerts: alerts.length > 0 ? alerts : undefined
      })
    }

    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY not configured')
    }

    const llm = new ChatOpenAI({
      modelName: 'gpt-4',
      temperature: 0,
      openAIApiKey: process.env.OPENAI_API_KEY,
    })

    // Get existing contracts for reference - filtered by team
    const contracts = await prisma.contract.findMany({
      select: {
        id: true,
        clientName: true,
        projectName: true,
        category: true,
      },
      where: {
        teamId,
        status: 'active'
      }
    })

    // Build conversation history
    const conversationHistory = history ? history.map(h =>
      `${h.role === 'user' ? 'Usu√°rio' : 'Assistente'}: ${h.content}`
    ).join('\n') : ''

    const contractsInfo = contracts.map(c =>
      `ID: ${c.id} | Cliente: ${c.clientName} | Projeto: ${c.projectName}${c.category ? ` | Categoria: ${c.category}` : ''}`
    ).join('\n')

    // Find potential fuzzy matches for better context
    const allText = `${message} ${conversationHistory}`
    const fuzzyMatches = findContractMatches(allText, contracts, 0.3)
    const fuzzyMatchInfo = fuzzyMatches.length > 0
      ? `\n\nPoss√≠veis correspond√™ncias fuzzy no texto:\n${fuzzyMatches.map(m =>
          `- ${m.contract.clientName} / ${m.contract.projectName} (${m.matchField}: ${(m.similarity * 100).toFixed(0)}% similar)`
        ).join('\n')}`
      : ''

    const systemPrompt = `Voc√™ √© um assistente especializado em criar contas a receber para um escrit√≥rio de arquitetura no Brasil.

Contratos ativos no sistema:
${contractsInfo || 'Nenhum contrato ativo encontrado'}${fuzzyMatchInfo}

Categorias de receb√≠veis: projeto, obra, RT (ou personalizada)

${conversationHistory ? `Conversa anterior:\n${conversationHistory}\n` : ''}

Mensagem atual do usu√°rio: ${message}

EXEMPLOS de mensagens do usu√°rio:
- "2500 a receber 25/11 da loja Leo Madeiras, RT do projeto dina claire"
- "Receber 5000 dia 15 do pr√≥ximo m√™s do Jo√£o Silva, projeto residencial"
- "3 parcelas de 1000 do restaurante Sabor, primeira dia 10"

TAREFA: Analise a mensagem e determine se o usu√°rio quer CRIAR uma nova conta a receber ou EDITAR uma existente.

INDICADORES DE EDI√á√ÉO:
- Palavras como "alterar", "modificar", "mudar", "editar", "atualizar", "corrigir"
- Refer√™ncia a receb√≠vel existente ("aquele de 2500", "o da loja Leo", etc.)
- Mencionar mudan√ßa de valor, data, status

INDICADORES DE CRIA√á√ÉO:
- Palavras como "nova", "criar", "adicionar", "receber"
- Valores e datas espec√≠ficas para novos receb√≠veis
- Parcelas ou m√∫ltiplos receb√≠veis

Informa√ß√µes OBRIGAT√ìRIAS para CRIAR:
1. Contrato associado (identificar pelo cliente/projeto mencionado)
2. Valor (em R$)
3. Data prevista de recebimento

Informa√ß√µes OPCIONAIS:
- Categoria (projeto, obra, RT, ou outra)
- N√∫mero da nota fiscal
- Observa√ß√µes

REGRAS IMPORTANTES:
- Use fuzzy matching para identificar contratos (aceite varia√ß√µes de mai√∫sculas/min√∫sculas, acentos, abrevia√ß√µes)
- Se mencionar parcelas, crie m√∫ltiplos receb√≠veis
- Para datas relativas (pr√≥ximo m√™s, dia 15, etc), calcule corretamente
- Se n√£o encontrar contrato correspondente, pergunte para esclarecer
- Se houver ambiguidade sobre qual contrato, liste op√ß√µes
- SEMPRE retorne JSON v√°lido
- Se faltarem informa√ß√µes obrigat√≥rias (valor, data, contrato), pergunte especificamente

Hoje √© ${new Date().toISOString().split('T')[0]}

RESPONDA em formato JSON:

Se for CRIAR e tiver informa√ß√µes suficientes:
{
  "action": "create",
  "receivables": [
    {
      "contractId": "id_do_contrato",
      "amount": 0000.00,
      "expectedDate": "YYYY-MM-DD",
      "category": "categoria ou null",
      "invoiceNumber": "n√∫mero ou null",
      "notes": "observa√ß√µes ou null"
    }
  ],
  "confirmation": "Mensagem confirmando o(s) receb√≠vel(is) que ser√°(√£o) criado(s)",
  "contractInfo": "Cliente: X, Projeto: Y"
}

Se for EDITAR um receb√≠vel existente:
{
  "action": "edit_suggestion",
  "message": "Identifiquei que voc√™ quer editar uma conta a receber existente. Para edit√°-la:\n1. Encontre o receb√≠vel na lista √† direita\n2. Clique no bot√£o 'Editar'\n3. Fa√ßa as altera√ß√µes desejadas\n\nOu me diga exatamente qual receb√≠vel (valor/cliente/data) e o que quer alterar com mais detalhes."
}

Se PRECISAR de esclarecimentos:
{
  "action": "clarify",
  "question": "Pergunta espec√≠fica para esclarecer",
  "context": "O que foi entendido at√© agora",
  "suggestions": ["op√ß√£o 1", "op√ß√£o 2"] // se houver op√ß√µes para o usu√°rio escolher
}

Se N√ÉO ENCONTRAR contrato correspondente:
{
  "action": "no_contract",
  "message": "Mensagem explicando que n√£o foi encontrado contrato",
  "suggestions": ["contratos similares se houver"]
}`

    const response = await llm.invoke([{ role: 'user', content: systemPrompt }])
    let result
    try {
      const responseText = response.content.toString()
      console.log('AI Response:', responseText) // Debug log
      result = JSON.parse(responseText)
    } catch (parseError) {
      console.error('JSON Parse Error:', parseError)
      console.error('Raw response:', response.content.toString())
      return NextResponse.json({
        success: true,
        action: 'clarify',
        question: 'Desculpe, houve um erro interno. Pode reformular sua solicita√ß√£o de forma mais espec√≠fica? Por exemplo: "valor a receber, data prevista, de qual cliente/projeto"',
        context: 'Erro de processamento interno'
      })
    }

    // Validate result structure
    if (!result || !result.action) {
      return NextResponse.json({
        success: true,
        action: 'clarify',
        question: 'N√£o consegui entender sua solicita√ß√£o. Pode me dizer especificamente qual valor voc√™ precisa receber, de qual cliente/projeto e para qual data?',
        context: 'Informa√ß√µes insuficientes'
      })
    }

    if (result.action === 'create') {
      // Instead of creating immediately, return confirmation request
      const receivableData = result.receivables[0] // Take first receivable for confirmation

      return NextResponse.json({
        success: true,
        action: 'confirm',
        pendingReceivable: receivableData,
        question: `${result.confirmation}\n\nüìã **Por favor, confirme se os dados est√£o corretos:**\n‚Ä¢ Valor: R$${receivableData.amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n‚Ä¢ Data esperada: ${formatDateForDisplay(receivableData.expectedDate)}\n‚Ä¢ Projeto: ${result.contractInfo}\n\nüí¨ *Pode confirmar se est√° tudo certo? Qualquer confirma√ß√£o sua e eu criarei o receb√≠vel!*`,
        contractInfo: result.contractInfo
      })
    } else if (result.action === 'no_contract') {
      return NextResponse.json({
        success: true,
        action: 'no_contract',
        message: result.message,
        suggestions: result.suggestions || []
      })
    } else {
      // Need clarification
      return NextResponse.json({
        success: true,
        action: 'clarify',
        question: result.question,
        context: result.context,
        suggestions: result.suggestions || []
      })
    }
  } catch (error) {
    console.error('AI Receivable creation error:', error)
    if (error instanceof Error && error.message === "Unauthorized") {
      return NextResponse.json({ error: 'Unauthorized - Authentication required' }, { status: 401 })
    }
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: 'Invalid request format' }, { status: 400 })
    }
    return NextResponse.json(
      { error: 'Falha ao processar solicita√ß√£o' },
      { status: 500 }
    )
  }
}